const adjList = {
  1: [2, 5],
  2: [1, 3, 5],
  3: [2, 4],
  4: [3, 5],
  5: [1, 2, 4],
  6: []
}

function aShortestPath(start, end) {
  let visited = new Set().add(start)
  let queue = [[start, [start]]]
  // console.log(visited)

  while (queue.length) {
    // console.log('visited', visited)
    // console.log('queue',queue)
    let [node, path] = queue.shift()
    // console.log('curr', curr)
    if (node  === end) {
      return path;
    }
    for (let val of adjList[node]) {
      // console.log('val', val)
      if (!visited.has(val)) {
        visited.add(val)
        queue.push([val,[...path, val]])
      }
    }
  }
}

console.log("First Test:");
console.log(aShortestPath(1, 3)); // -> [ 1, 2, 3 ] (One possible solution)
console.log("Second Test:");
console.log(aShortestPath(4, 1)); // -> [ 4, 5, 1 ] (One possible solution)
console.log("Third Test:");



function bfsPath(matrix, startNode, endValue) {
  const queue = [[startNode]];
  const visited = new Set([startNode.toString()]);

  while (queue.length) {
      const path = queue.shift();
      const [row, col] = path[path.length - 1];
      
      if (matrix[row][col] === endValue) {
          return path; 
      }

      const neighbors = findNeighbors([row, col], matrix);
      for (const neighbor of neighbors) {
          const neighborKey = neighbor.toString();
          if (!visited.has(neighborKey)) {
              visited.add(neighborKey);
              queue.push([...path, neighbor]);
          }
      }
  }

  return false; 
}
